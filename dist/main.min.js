(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/config.js":[function(require,module,exports){
/**
 * Created by saurabhk on 10/07/16.
 */
module.exports = {
    graphicPadding: 50,
    gameBoundaryWidth:10
};
},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/entities/player.js":[function(require,module,exports){
var Player = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'testsprite');
    game.add.existing(this);
};

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function () {
};

module.exports = Player;

},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'tictactoe-game');

window.Utils = require('./utils/utils');
require('./utils/prototype');
window.playerState = {
    currentLevel: 'Game'
};
window.globalUser = {};
globalUser.settings = {
    grids:4
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));
game.state.add('GameOver', require('./states/gameOver'));

game.state.start('Boot');

},{"./states/boot":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/boot.js","./states/game":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/game.js","./states/gameOver":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/gameOver.js","./states/menu":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/menu.js","./states/preloader":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/preloader.js","./states/splash":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/splash.js","./utils/prototype":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/utils/prototype.js","./utils/utils":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/utils/utils.js"}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {
};

module.exports = Boot;

Boot.prototype = {

    preload: function () {
        this.load.image('preloader', 'assets/preloader.gif');
    },

    create: function () {
        this.game.input.maxPointers = 1;
        this.game.stage.backgroundColor = "#ffffff";
        if (this.game.device.desktop) {
            this.game.stage.scale.pageAlignHorizontally = true;
        } else {
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.minWidth = 480;
            this.game.scale.minHeight = 260;
            this.game.scale.maxWidth = 640;
            this.game.scale.maxHeight = 480;
            //this.game.scale.forceLandscape = true;
            this.game.scale.pageAlignHorizontally = true;
            this.game.scale.updateLayout(true);
        }

        this.game.state.start('Preloader');
    }
};

},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/game.js":[function(require,module,exports){
var Player = require('../entities/player');
var config = require('../config');
var utils = require('../utils/utils');

var Game = function () {
    this.testentity = null;
    this.graphics = null;
    this.sectionSize = null;
    this.turn = true;
    this.boardState = [];
};

module.exports = Game;

Game.prototype = {

    create: function () {
        var i,j;
        var graphics = this.game.add.graphics(config.graphicPadding, config.graphicPadding);
        this.graphics = graphics;

        // set a fill and line style
        graphics.lineStyle(config.gameBoundaryWidth, 0xdddddd);
        var gridDetails = utils.gridSize(this.game);

        // Vertical lines
        for (i = 1; i < globalUser.settings.grids; i++) {
            graphics.moveTo(i * gridDetails[0] + (i-1) * config.gameBoundaryWidth,0);
            graphics.lineTo(i * gridDetails[0] + (i-1) * config.gameBoundaryWidth, gridDetails[1]);
        }

        // Horizontal lines
        for (j = 1; j < globalUser.settings.grids; j++) {
            graphics.moveTo(0, j * gridDetails[0] + (j-1) * config.gameBoundaryWidth);
            graphics.lineTo(gridDetails[1], j * gridDetails[0] + (j-1) * config.gameBoundaryWidth);
        }
        this.sectionSize = gridDetails[1]/globalUser.settings.grids;
        this.input.onDown.add(this.addPlayingPiece, this);

        // Initialize board state with all 0 by default
        for(i = 0; i < globalUser.settings.grids; i++) {
            for(j = 0; j < globalUser.settings.grids; j++) {
                if (this.boardState[i]) {
                    this.boardState[i][j] = 0
                } else {
                    this.boardState[i] = [];
                    this.boardState[i][j] = 0
                }
            }
        }
    },

    update: function () {
    },

    onInputDown: function () {
        this.game.state.start('Menu');
    },

    addPlayingPiece: function() {
        var xCordinate;
        var yCordinate;
        var sectionSize = this.sectionSize;
        var mouse = this.input.position;
        mouse.x = mouse.x - config.graphicPadding;
        mouse.y = mouse.y - config.graphicPadding;

        for (var x = 0;x < globalUser.settings.grids;x++) {
            for (var y = 0;y < globalUser.settings.grids;y++) {
                xCordinate = x * sectionSize;
                yCordinate = y * sectionSize;

                if (
                    mouse.x >= xCordinate && mouse.x <= xCordinate + sectionSize &&
                    mouse.y >= yCordinate && mouse.y <= yCordinate + sectionSize
                    ) {

                    //clearPlayingArea(xCordinate, yCordinate);
                    globalUser.turn = [y,x];
                    if(this.boardState[y][x] == 0) {
                        if (this.turn) {
                            this.drawX(xCordinate, yCordinate);
                            this.boardState[y][x] = "X";
                        } else {
                            this.drawO(xCordinate, yCordinate);
                            this.boardState[y][x] = "O";
                        }
                        this.turn = !this.turn;
                        if(this.isStateTerminal()) {
                            this.game.state.start("GameOver");
                        }
                    }

                }
            }
        }
    },

    drawO: function(x, y) {
        var sectionSize = this.sectionSize;
        var graphics = this.graphics;
        var halfSectionSize = (0.5 * sectionSize);
        var centerX = x + halfSectionSize;
        var centerY = y + halfSectionSize;
        var diameter = sectionSize * 0.4;
            graphics.lineStyle(10, 0x01bBC2);
            graphics.drawCircle(centerX, centerY, diameter);

    },

    drawX: function(x,y) {
        var graphics = this.graphics;
        var sectionSize = this.sectionSize;
        graphics.lineStyle(10, 0xf1be32);
        var offset = sectionSize * 0.3;
        graphics.moveTo(x + offset, y + offset);
        graphics.lineTo(x + sectionSize - offset, y + sectionSize - offset);

        graphics.moveTo(x + offset, y + sectionSize - offset);
        graphics.lineTo(x + sectionSize - offset, y + offset);
    },

    isStateTerminal: function() {
        var x, y;
        var diagonals = [[],[]];
        // Check rows
        for(x = 0; x <this.boardState.length; x++) {
            var row = this.boardState[x];
            if (row[0] != 0 && row.isSingleValued()) {
                return true;
            }
        }

        // Check columns
        for(x = 0;x < globalUser.settings.grids;x++) {
            var col = this.boardState.map(function(value) { return value[x]; });
            if (col[0] != 0 && col.isSingleValued()) {
                return true;
            }
        }

        // Check diagonals
        for(x = 0;x < globalUser.settings.grids;x++) {
            for(y = 0;y < globalUser.settings.grids;y++) {
                if(x == y) {
                    diagonals[0].push(this.boardState[x][y]);
                    diagonals[1].push(this.boardState[globalUser.settings.grids - 1 - x][y]);
                }

            }
        }

        for(x = 0; x <diagonals.length; x++){
            var diagonal = diagonals[x];
            if (diagonal[0] != 0 && diagonal.isSingleValued()) {
                return true;
            }
        }
        return false;
    }
};

},{"../config":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/config.js","../entities/player":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/entities/player.js","../utils/utils":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/utils/utils.js"}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/gameOver.js":[function(require,module,exports){
/**
 * Created by saurabhk on 11/07/16.
 */
var GameOver = function () {
    this.text = null;
};

module.exports = GameOver;

GameOver.prototype = {

    create: function () {
        var x = this.game.width / 2;
        var y = this.game.height / 2;

        var style = {font: "65px Arial", fill: "#dddddd", align: "center"};

        this.text = this.add.text(x - 300, y - 200, "GameOver", style);

        this.input.onDown.add(this.onDown, this);
    },

    update: function () {
    },

    onDown: function () {
        this.game.state.start(playerState.currentLevel);
    }
};

},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/menu.js":[function(require,module,exports){
var Menu = function () {
    this.text = null;
};

module.exports = Menu;

Menu.prototype = {

    create: function () {
        var x = this.game.width / 2;
        var y = this.game.height / 2;

        var style = {font: "65px Arial", fill: "#dddddd", align: "center"};

        this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

        this.input.onDown.add(this.onDown, this);
    },

    update: function () {
    },

    onDown: function () {
        this.game.state.start(playerState.currentLevel);
    }
};

},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/preloader.js":[function(require,module,exports){
var Preloader = function (game) {
    this.asset = null;
    this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

    preload: function () {
        this.asset = this.add.sprite(320, 240, 'preloader');
        this.asset.anchor.setTo(0.5, 0.5);

        this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
        this.load.setPreloadSprite(this.asset);
        this.load.image('testsprite', 'assets/test.png');
    },

    create: function () {
        this.asset.cropEnabled = false;
    },

    update: function () {
        if (!!this.ready) {
            this.game.state.start('Menu');
        }
    },

    onLoadComplete: function () {
        this.ready = true;
    }
};

},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
    create: function () {
    }
};
},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/utils/prototype.js":[function(require,module,exports){
/**
 * Created by saurabhk on 10/07/16.
 */
(function(){
    Array.prototype.isSingleValued = function() {

        for(var i = 1; i < this.length; i++)
        {
            if(this[i] !== this[0])
                return false;
        }

        return true;
    }
})();
},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/utils/utils.js":[function(require,module,exports){
"use strict";
var config = require('./../config');
var Utils = {
    containsObject: function (obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },

    gridSize: function(game) {
        var gameWidth =  Math.min(game.width, game.height) - 2 * config.graphicPadding;
        var gridTotalWidth = gameWidth - (globalUser.settings.grids - 1) * config.gameBoundaryWidth;
        return [gridTotalWidth / globalUser.settings.grids, gameWidth];
    }
};

module.exports = Utils;
},{"./../config":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/config.js"}]},{},["/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,

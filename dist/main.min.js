(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/AI.js":[function(require,module,exports){
/**
 * Created by saurabhk on 12/07/16.
 */
/*
 * Constructs an action that the ai player could make
 * @param pos [Number]: the cell position the ai would make its action in
 * made that action
 */
var AIAction = function(pos) {

    // public : the position on the board that the action would put the letter on
    this.movePosition = pos;

    //public : the minimax value of the state that the action leads to when applied
    this.minimaxVal = 0;

    /*
     * public : applies the action to a state to get the next state
     * @param state [State]: the state to apply the action to
     * @return [State]: the next state
     */
    this.applyTo = function(state) {
        var next = new State(state);

        //put the letter on the board
        next.boardState[this.movePosition[0]][this.movePosition[1]]  = state.turn ? "X" : "O";
        next.lastMove.x = this.movePosition[1];
        next.lastMove.y = this.movePosition[0];

        if(!state.turn){
            next.oMovesCount++;
        }
        next.turn  = !next.turn;

        //next.advanceTurn();

        return next;
    }
};

/*
 * public static function that defines a rule for sorting AIActions in ascending manner
 * @param firstAction [AIAction] : the first action in a pairwise sort
 * @param secondAction [AIAction]: the second action in a pairwise sort
 * @return [Number]: -1, 1, or 0
 */
AIAction.ASCENDING = function(firstAction, secondAction) {
    if(firstAction.minimaxVal < secondAction.minimaxVal)
        return -1; //indicates that firstAction goes before secondAction
    else if(firstAction.minimaxVal > secondAction.minimaxVal)
        return 1; //indicates that secondAction goes before firstAction
    else
        return 0; //indicates a tie
}

/*
 * public static function that defines a rule for sorting AIActions in descending manner
 * @param firstAction [AIAction] : the first action in a pairwise sort
 * @param secondAction [AIAction]: the second action in a pairwise sort
 * @return [Number]: -1, 1, or 0
 */
AIAction.DESCENDING = function(firstAction, secondAction) {
    if(firstAction.minimaxVal > secondAction.minimaxVal)
        return -1; //indicates that firstAction goes before secondAction
    else if(firstAction.minimaxVal < secondAction.minimaxVal)
        return 1; //indicates that secondAction goes before firstAction
    else
        return 0; //indicates a tie
}


/*
 * Constructs an AI player with a specific level of intelligence
 * @param level [String]: the desired level of intelligence
 */
var AI = function(level) {

    //private attribute: level of intelligence the player has
    var levelOfIntelligence = level;

    //private attribute: the game the player is playing
    var game = {};

    /*
     * private recursive function that computes the minimax value of a game state
     * @param state [State] : the state to calculate its minimax value
     * @returns [Number]: the minimax value of the state
     */
    function minimaxValue(state) {
        if(state.isStateTerminal()) {
            //a terminal game state is the base case
            return game.score(state);
        }
        else {
            var stateScore; // this stores the minimax value we'll compute

            if(state.turn)
            // X wants to maximize --> initialize to a value smaller than any possible score
                stateScore = -1000;
            else
            // O wants to minimize --> initialize to a value larger than any possible score
                stateScore = 1000;

            var availablePositions = state.emptyCells();

            //enumerate next available states using the info form available positions
            var availableNextStates = availablePositions.map(function(pos) {
                var action = new AIAction(pos);

                return action.applyTo(state);
            });
            /* calculate the minimax value for all available next states
             * and evaluate the current state's value */
            availableNextStates.forEach(function(nextState) {
                var nextScore = minimaxValue(nextState);
                if(state.turn) {
                    // X wants to maximize --> update stateScore iff nextScore is larger
                    if(nextScore > stateScore)
                        stateScore = nextScore;
                }
                else {
                    // O wants to minimize --> update stateScore iff nextScore is smaller
                    if(nextScore < stateScore)
                        stateScore = nextScore;
                }
            });

            return stateScore;
        }
    }

    /*
     * private function: make the ai player take a blind move
     * that is: choose the cell to place its symbol randomly
     * @param turn [String]: the player to play, either X or O
     */
    function takeABlindMove() {
        var available = game.currentState.emptyCells();
        var randomCell = available[Math.floor(Math.random() * available.length)];
        var action = new AIAction(randomCell);

        var next = action.applyTo(game.currentState);

        game.advanceToState(next);
    }

    /*
     * private function: make the ai player take a novice move,
     * that is: mix between choosing the optimal and suboptimal minimax decisions
     * @param turn [String]: the player to play, either X or O
     */
    function takeANoviceMove() {
        var available = game.currentState.emptyCells();

        //enumerate and calculate the score for each available actions to the ai player
        var availableActions = available.map(function(pos) {
            var action =  new AIAction(pos); //create the action object
            var nextState = action.applyTo(game.currentState); //get next state by applying the action

            action.minimaxVal = minimaxValue(nextState); //calculate and set the action's minimax value

            return action;
        });

        //sort the enumerated actions list by score
        if(turn === "X")
        //X maximizes --> sort the actions in a descending manner to have the action with maximum minimax at first
            availableActions.sort(AIAction.DESCENDING);
        else
        //O minimizes --> sort the actions in an ascending manner to have the action with minimum minimax at first
            availableActions.sort(AIAction.ASCENDING);

        /*
         * take the optimal action 40% of the time, and take the 1st suboptimal action 60% of the time
         */
        var chosenAction;
        if(Math.random()*100 <= 40) {
            chosenAction = availableActions[0];
        }
        else {
            if(availableActions.length >= 2) {
                //if there is two or more available actions, choose the 1st suboptimal
                chosenAction = availableActions[1];
            }
            else {
                //choose the only available actions
                chosenAction = availableActions[0];
            }
        }
        var next = chosenAction.applyTo(game.currentState);

        game.advanceToState(next);
    };

    /*
     * private function: make the ai player take a master move,
     * that is: choose the optimal minimax decision
     * @param turn [String]: the player to play, either X or O
     */
    function takeAMasterMove() {
        var available = game.currentState.emptyCells();

        //enumerate and calculate the score for each avaialable actions to the ai player
        var availableActions = available.map(function(pos) {
            var action =  new AIAction(pos); //create the action object
            var next = action.applyTo(game.currentState); //get next state by applying the action
            action.minimaxVal = minimaxValue(next); //calculate and set the action's minmax value
            return action;
        });
        console.log(availableActions);
        //sort the enumerated actions list by score
        //if(turn === "X")
        ////X maximizes --> sort the actions in a descending manner to have the action with maximum minimax at first
        //    availableActions.sort(AIAction.DESCENDING);
        //else
        //O minimizes --> sort the actions in an ascending manner to have the action with minimum minimax at first
        availableActions.sort(AIAction.ASCENDING);


        //take the first action as it's the optimal
        var chosenAction = availableActions[0];
        var next = chosenAction.applyTo(game.currentState);

        game.advanceToState(next);
    }


    /*
     * public method to specify the game the ai player will play
     * @param _game [Game] : the game the ai will play
     */
    this.plays = function(_game){
        game = _game;
    };

    /*
     * public function: notify the ai player that it's its turn
     * @param turn [String]: the player to play, either X or O
     */
    this.makeMove = function() {
        switch(levelOfIntelligence) {
            //invoke the desired behavior based on the level chosen
            case "blind": takeABlindMove(); break;
            case "novice": takeANoviceMove(); break;
            case "master": takeAMasterMove(); break;
        }
    };
};

module.exports = AI;
},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/config.js":[function(require,module,exports){
/**
 * Created by saurabhk on 10/07/16.
 */
module.exports = {
    graphicPadding: 50,
    gameBoundaryWidth:10
};
},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/entities/player.js":[function(require,module,exports){
var Player = function (game, x, y) {
    Phaser.Sprite.call(this, game, x, y, 'testsprite');
    game.add.existing(this);
};

Player.prototype = Object.create(Phaser.Sprite.prototype);
Player.prototype.constructor = Player;

/**
 * Automatically called by World.update
 */
Player.prototype.update = function () {
};

module.exports = Player;

},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/main.js":[function(require,module,exports){
'use strict';

var game = new Phaser.Game(800, 600, Phaser.AUTO, 'tictactoe-game');

window.Utils = require('./utils/utils');
require('./utils/prototype');
window.playerState = {
    currentLevel: 'Game'
};
window.globalUser = {};
globalUser.settings = {
    grids:3
};

game.state.add('Boot', require('./states/boot'));
game.state.add('Splash', require('./states/splash'));
game.state.add('Preloader', require('./states/preloader'));
game.state.add('Menu', require('./states/menu'));
game.state.add('Game', require('./states/game'));
game.state.add('GameOver', require('./states/gameOver'));

game.state.start('Boot');

},{"./states/boot":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/boot.js","./states/game":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/game.js","./states/gameOver":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/gameOver.js","./states/menu":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/menu.js","./states/preloader":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/preloader.js","./states/splash":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/splash.js","./utils/prototype":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/utils/prototype.js","./utils/utils":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/utils/utils.js"}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/boot.js":[function(require,module,exports){
var Boot = function () {
};

module.exports = Boot;

Boot.prototype = {

    preload: function () {
        this.load.image('preloader', 'assets/preloader.gif');
    },

    create: function () {
        this.game.input.maxPointers = 1;
        this.game.stage.backgroundColor = "#ffffff";
        if (this.game.device.desktop) {
            this.game.stage.scale.pageAlignHorizontally = true;
        } else {
            this.game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
            this.game.scale.minWidth = 480;
            this.game.scale.minHeight = 260;
            this.game.scale.maxWidth = 640;
            this.game.scale.maxHeight = 480;
            //this.game.scale.forceLandscape = true;
            this.game.scale.pageAlignHorizontally = true;
            this.game.scale.updateLayout(true);
        }

        this.game.state.start('Preloader');
    }
};

},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/game.js":[function(require,module,exports){
var Player = require('../entities/player');
var config = require('../config');
var utils = require('../utils/utils');

// Not state of phaser but game
function State(oldState) {
    var i,j;
    this.turn = true;
    this.boardState = [];
    this.oMovesCount = 0;
    this.lastMove = {};
    this.status = "beginning";
    this.result = "running";

    if(typeof oldState !== "undefined") {
        // if the state is constructed using a copy of another state
        this.boardState = JSON.parse(JSON.stringify(oldState.boardState));

        this.oMovesCount = oldState.oMovesCount;
        this.turn = oldState.turn;
    } else {
        // Initialize board state with all 0 by default
        for(i = 0; i < globalUser.settings.grids; i++) {
            for(j = 0; j < globalUser.settings.grids; j++) {
                if (this.boardState[i]) {
                    this.boardState[i][j] = 0
                } else {
                    this.boardState[i] = [];
                    this.boardState[i][j] = 0
                }
            }
        }
    }
}

State.prototype = {
    isStateTerminal: function() {
        var x, y;
        var diagonals = [[], []];
        // Check rows
        for (x = 0; x < this.boardState.length; x++) {
            var row = this.boardState[x];
            if (row[0] != 0 && row.isSingleValued()) {
                this.result = this.turn ? "X" : "O";
                return true;
            }
        }

        // Check columns
        for (x = 0; x < globalUser.settings.grids; x++) {
            var col = this.boardState.map(function (value) {
                return value[x];
            });
            if (col[0] != 0 && col.isSingleValued()) {
                this.result = this.turn ? "X" : "O";
                return true;
            }
        }

        // Check diagonals
        for (x = 0; x < globalUser.settings.grids; x++) {
            for (y = 0; y < globalUser.settings.grids; y++) {
                if (x == y) {
                    diagonals[0].push(this.boardState[x][y]);
                    diagonals[1].push(this.boardState[globalUser.settings.grids - 1 - x][y]);
                }

            }
        }

        for (x = 0; x < diagonals.length; x++) {
            var diagonal = diagonals[x];
            if (diagonal[0] != 0 && diagonal.isSingleValued()) {
                this.result = this.turn ? "X" : "O";
                return true;
            }
        }

        // Check Draw
        return this.emptyCells().length == 0
    },

    emptyCells: function() {
        var x,y;
        var emptyCells = [];
        for(x = 0;x < globalUser.settings.grids;x++) {
            for(y = 0;y < globalUser.settings.grids;y++) {
                if(this.boardState[x][y] == 0) {
                    emptyCells.push([x,y]);
                }
            }
        }
        return emptyCells;
    }
};

var Game = {

    preload: function() {
        this.opponent = "AI";
        this.graphics = null;
        this.sectionSize = null;
        this.result = "running";
        this.difficultyLevel = null;
        this.currentState = new State();
    },

    create: function () {
        var i,j;
        var graphics = this.game.add.graphics(config.graphicPadding, config.graphicPadding);
        this.graphics = graphics;

        // set a fill and line style
        graphics.lineStyle(config.gameBoundaryWidth, 0xdddddd);
        var gridDetails = utils.gridSize(this.game);

        // Vertical lines
        for (i = 1; i < globalUser.settings.grids; i++) {
            graphics.moveTo(i * gridDetails[0] + (i-1) * config.gameBoundaryWidth,0);
            graphics.lineTo(i * gridDetails[0] + (i-1) * config.gameBoundaryWidth, gridDetails[1]);
        }

        // Horizontal lines
        for (j = 1; j < globalUser.settings.grids; j++) {
            graphics.moveTo(0, j * gridDetails[0] + (j-1) * config.gameBoundaryWidth);
            graphics.lineTo(gridDetails[1], j * gridDetails[0] + (j-1) * config.gameBoundaryWidth);
        }
        this.sectionSize = gridDetails[1]/globalUser.settings.grids;
        this.input.onDown.add(this.addPlayingPiece, this);

    },

    update: function () {
    },

    onInputDown: function () {
        this.game.state.start('Menu');
    },

    addPlayingPiece: function() {
        var xCordinate;
        var yCordinate;
        var sectionSize = this.sectionSize;
        var mouse = this.input.position;
        mouse.x = mouse.x - config.graphicPadding;
        mouse.y = mouse.y - config.graphicPadding;

        for (var x = 0;x < globalUser.settings.grids;x++) {
            for (var y = 0;y < globalUser.settings.grids;y++) {
                xCordinate = x * sectionSize;
                yCordinate = y * sectionSize;

                if (
                    mouse.x >= xCordinate && mouse.x <= xCordinate + sectionSize &&
                    mouse.y >= yCordinate && mouse.y <= yCordinate + sectionSize
                    ) {

                    //clearPlayingArea(xCordinate, yCordinate);
                    this.currentState.lastMove.x = x;
                    this.currentState.lastMove.y = y;

                    if(this.currentState.boardState[y][x] == 0) {
                        this.advanceToState(this.currentState);
                    }

                }
            }
        }
    },

    advanceToState: function(state) {
        var xCordinate = state.lastMove.x * this.sectionSize;
        var yCordinate = state.lastMove.y * this.sectionSize;
        if (state.turn) {
            this.drawX(xCordinate, yCordinate);
            this.currentState.boardState[state.lastMove.y][state.lastMove.x] = "X";
            //this.currentState.turn = false;
            if(this.currentState.isStateTerminal()) {
                state.status = "finished";
                //this.game.state.start("GameOver");
                return;
            }
            if(globalUser.AI) {
                globalUser.AI.plays(this);
                globalUser.AI.makeMove();
            }
        } else{
            this.drawO(xCordinate, yCordinate);
            this.currentState.boardState[state.lastMove.y][state.lastMove.x] = "O";
            if(this.currentState.isStateTerminal()) {
                state.status = "finished";
                //this.game.state.start("GameOver");
                return;
            }
            this.currentState.oMovesCount += 1;
            this.currentState.turn = !this.currentState.turn;
        }
        state.turn = !state.turn;
    },

    drawO: function(x, y) {
        var sectionSize = this.sectionSize;
        var graphics = this.graphics;
        var halfSectionSize = (0.5 * sectionSize);
        var centerX = x + halfSectionSize;
        var centerY = y + halfSectionSize;
        var diameter = sectionSize * 0.4;
            graphics.lineStyle(10, 0x01bBC2);
            graphics.drawCircle(centerX, centerY, diameter);

    },

    drawX: function(x,y) {
        var graphics = this.graphics;
        var sectionSize = this.sectionSize;
        graphics.lineStyle(10, 0xf1be32);
        var offset = sectionSize * 0.3;
        graphics.moveTo(x + offset, y + offset);
        graphics.lineTo(x + sectionSize - offset, y + sectionSize - offset);

        graphics.moveTo(x + offset, y + sectionSize - offset);
        graphics.lineTo(x + sectionSize - offset, y + offset);
    },

    score: function(_state) {
        if(_state.result === "X"){
            // the x player won
            return 10 - _state.oMovesCount;
        }
        else if(_state.result === "O") {
            //the x player lost
            return - 10 + _state.oMovesCount;
        }
        else {
            //it's a draw
            return 0;
        }
    }
};

// Export Game and make State global
window.State = State;
module.exports = Game;

},{"../config":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/config.js","../entities/player":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/entities/player.js","../utils/utils":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/utils/utils.js"}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/gameOver.js":[function(require,module,exports){
/**
 * Created by saurabhk on 11/07/16.
 */
var GameOver = function () {
    this.text = null;
};

module.exports = GameOver;

GameOver.prototype = {

    create: function () {
        var x = this.game.width / 2;
        var y = this.game.height / 2;

        var style = {font: "65px Arial", fill: "#dddddd", align: "center"};

        this.text = this.add.text(x - 300, y - 200, "GameOver", style);

        this.input.onDown.add(this.onDown, this);
    },

    update: function () {
    },

    onDown: function () {
        this.game.state.start(playerState.currentLevel);
    }
};

},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/menu.js":[function(require,module,exports){
var AI = require("../AI");
var Menu = function () {
    this.text = null;
};

module.exports = Menu;

Menu.prototype = {

    create: function () {
        var x = this.game.width / 2;
        var y = this.game.height / 2;

        var style = {font: "65px Arial", fill: "#dddddd", align: "center"};

        this.text = this.add.text(x - 300, y - 200, "Press to Start", style);

        this.input.onDown.add(this.onDown, this);
    },

    update: function () {
    },

    onDown: function () {
        window.globalUser.AI = new AI("master");
        this.game.state.start(playerState.currentLevel);
    }
};

},{"../AI":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/AI.js"}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/preloader.js":[function(require,module,exports){
var Preloader = function (game) {
    this.asset = null;
    this.ready = false;
};

module.exports = Preloader;

Preloader.prototype = {

    preload: function () {
        this.asset = this.add.sprite(320, 240, 'preloader');
        this.asset.anchor.setTo(0.5, 0.5);

        this.load.onLoadComplete.addOnce(this.onLoadComplete, this);
        this.load.setPreloadSprite(this.asset);
        this.load.image('testsprite', 'assets/test.png');
    },

    create: function () {
        this.asset.cropEnabled = false;
    },

    update: function () {
        if (!!this.ready) {
            this.game.state.start('Menu');
        }
    },

    onLoadComplete: function () {
        this.ready = true;
    }
};

},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/states/splash.js":[function(require,module,exports){
var Splash = function () {
};

module.exports = Splash;

Splash.prototype = {
    create: function () {
    }
};
},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/utils/prototype.js":[function(require,module,exports){
/**
 * Created by saurabhk on 10/07/16.
 */
(function(){
    Array.prototype.isSingleValued = function() {
        return !!this.reduce(function(a, b){ return (a === b) ? a : NaN; });
    }
})();
},{}],"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/utils/utils.js":[function(require,module,exports){
"use strict";
var config = require('./../config');
var Utils = {
    containsObject: function (obj, list) {
        var i;
        for (i = 0; i < list.length; i++) {
            if (list[i] === obj) {
                return true;
            }
        }

        return false;
    },

    gridSize: function(game) {
        var gameWidth =  Math.min(game.width, game.height) - 2 * config.graphicPadding;
        var gridTotalWidth = gameWidth - (globalUser.settings.grids - 1) * config.gameBoundaryWidth;
        return [gridTotalWidth / globalUser.settings.grids, gameWidth];
    }
};

module.exports = Utils;
},{"./../config":"/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/config.js"}]},{},["/Users/saurabhk/Workspace/Playground/Node Projects/phaser/tictactoe/src/js/main.js"])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
